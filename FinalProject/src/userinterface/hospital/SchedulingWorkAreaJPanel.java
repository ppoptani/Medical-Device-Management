/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.hospital;

import business.enterprise.DistributorEnterprise;
import business.enterprise.HospitalEnterprise;
import business.model.Category;
import business.model.Device;
import business.model.OperatingRoomsDirectory;
import business.model.OperationalRooms;
import business.model.Reservation;
import business.model.ReservationCatalog;
import business.model.Surgery;
import business.model.SurgeryTeam;
import business.model.SurgeryTeamDirectory;
import business.network.Network;
import business.organization.Organization;
import business.organization.distributor.WarehouseManagementOrganization;
import business.useraccount.UserAccount;
import business.utility.EnumTypes.ReservationStatusType;
import business.utility.EnumTypes.RoomStatusType;
import business.utility.ValidatingFields;
import business.workarea.NewReservationWorkRequest;
import business.workarea.NewSurgeryWorkRequest;
import business.workarea.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author pu
 */
public class SchedulingWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SchedulingWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private NewSurgeryWorkRequest request;
    private HospitalEnterprise enterprise;
    private Network network;
    private OperatingRoomsDirectory operatingRoomsDirectory;
    private SurgeryTeamDirectory surgeryTeamDirectory;
    private ReservationCatalog reservationCatalog;
    private UserAccount userAccount;
    private Date startDate = null;
    private Date endDate = null;

    public SchedulingWorkAreaJPanel(JPanel userProcessContainer, Network network, HospitalEnterprise enterprise, NewSurgeryWorkRequest request, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.network = network;
        this.enterprise = enterprise;
        this.request = request;
        this.userAccount = userAccount;
        this.startDate = request.getSurgery().getSurgeryStartDate();
        this.endDate = request.getSurgery().getSurgeryEndDate();
        this.operatingRoomsDirectory = enterprise.getOperatingRoomsDirectory();
        this.surgeryTeamDirectory = enterprise.getSurgeryTeamDirectory();
        this.reservationCatalog = network.getReservationCatalog();
        populateFields();
    }

    private void populateFields() {
        clearAllComboBoxes();
        surgeryTypeJTextField.setText(request.getSurgery().getSurgeryType());
        surgeryStartDateJFormattedTextField.setText(String.valueOf(startDate));
        surgeryEndDateJFormattedTextField.setText(String.valueOf(endDate));
        populateRoomComboBox();
        if (!surgeryTypeJTextField.getText().isEmpty()) {
            populateTeamComboBox(request.getSurgery().getSurgeryType());
        }
        populateDistributorComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        operationalRoomJLabel = new javax.swing.JLabel();
        operationalRoomJComboBox = new javax.swing.JComboBox();
        operationalTeamJComboBox = new javax.swing.JComboBox();
        operationalTeamJLabel = new javax.swing.JLabel();
        operationalDeviceJComboBox = new javax.swing.JComboBox();
        operationalDeviceJLabel = new javax.swing.JLabel();
        OperationalRoomStatusJLabel = new javax.swing.JLabel();
        operationalTeamStatusJLabel = new javax.swing.JLabel();
        OperationalDeviceStatusJLabel = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        DeviceCategoryJComboBox = new javax.swing.JComboBox();
        deviceCategoryJLabel = new javax.swing.JLabel();
        deviceCategoryListJLabel = new javax.swing.JLabel();
        DistributorJComboBox = new javax.swing.JComboBox();
        distributorJLabel = new javax.swing.JLabel();
        DistributorListJLabel = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        surgeryDateJLabel = new javax.swing.JLabel();
        surgeryDateJLabel1 = new javax.swing.JLabel();
        surgeryTypeJLabel = new javax.swing.JLabel();
        surgeryStartDateJFormattedTextField = new javax.swing.JFormattedTextField();
        surgeryTypeJTextField = new javax.swing.JTextField();
        surgeryEndDateJFormattedTextField = new javax.swing.JFormattedTextField();
        scheduleJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Scheduling Surgery");

        operationalRoomJLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        operationalRoomJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        operationalRoomJLabel.setText("Operational Room:");

        operationalRoomJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        operationalRoomJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operationalRoomJComboBoxActionPerformed(evt);
            }
        });

        operationalTeamJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        operationalTeamJLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        operationalTeamJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        operationalTeamJLabel.setText("Operational Team:");

        operationalDeviceJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        operationalDeviceJLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        operationalDeviceJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        operationalDeviceJLabel.setText("Operational Device:");

        OperationalRoomStatusJLabel.setForeground(new java.awt.Color(255, 0, 0));
        OperationalRoomStatusJLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        operationalTeamStatusJLabel.setForeground(new java.awt.Color(255, 0, 0));
        operationalTeamStatusJLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        OperationalDeviceStatusJLabel.setForeground(new java.awt.Color(255, 0, 0));
        OperationalDeviceStatusJLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        backJButton.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        DeviceCategoryJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        deviceCategoryJLabel.setForeground(new java.awt.Color(255, 0, 0));
        deviceCategoryJLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        deviceCategoryListJLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        deviceCategoryListJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        deviceCategoryListJLabel.setText("Device Category:");

        DistributorJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        distributorJLabel.setForeground(new java.awt.Color(255, 0, 0));
        distributorJLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        DistributorListJLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        DistributorListJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        DistributorListJLabel.setText("Distributor:");

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Requested Surgery Details"), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N
        jLayeredPane1.setName(""); // NOI18N
        jLayeredPane1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        surgeryDateJLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        surgeryDateJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        surgeryDateJLabel.setText("Surgery Start Date:");
        jLayeredPane1.add(surgeryDateJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 59, 112, 25));

        surgeryDateJLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        surgeryDateJLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        surgeryDateJLabel1.setText("Surgery End Date:");
        jLayeredPane1.add(surgeryDateJLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(328, 59, 112, 30));

        surgeryTypeJLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        surgeryTypeJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        surgeryTypeJLabel.setText("Surgery Type:");
        jLayeredPane1.add(surgeryTypeJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, 112, 25));

        surgeryStartDateJFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        surgeryStartDateJFormattedTextField.setEnabled(false);
        surgeryStartDateJFormattedTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surgeryStartDateJFormattedTextFieldActionPerformed(evt);
            }
        });
        jLayeredPane1.add(surgeryStartDateJFormattedTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 59, 158, 30));

        surgeryTypeJTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        surgeryTypeJTextField.setEnabled(false);
        jLayeredPane1.add(surgeryTypeJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, 232, 30));

        surgeryEndDateJFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        surgeryEndDateJFormattedTextField.setEnabled(false);
        surgeryEndDateJFormattedTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surgeryEndDateJFormattedTextFieldActionPerformed(evt);
            }
        });
        jLayeredPane1.add(surgeryEndDateJFormattedTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 59, 141, 30));

        scheduleJButton.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        scheduleJButton.setText("Schedule Surgery");
        scheduleJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(105, 105, 105)
                                        .addComponent(scheduleJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(operationalDeviceJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(258, 258, 258)))
                                .addGap(20, 20, 20)
                                .addComponent(OperationalDeviceStatusJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(operationalDeviceJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(deviceCategoryListJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(DeviceCategoryJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(DistributorListJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(DistributorJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(operationalRoomJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(operationalRoomJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(operationalTeamJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(operationalTeamJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(distributorJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(deviceCategoryJLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(OperationalRoomStatusJLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(operationalTeamStatusJLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(202, 202, 202)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(82, 82, 82))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(operationalRoomJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(operationalRoomJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OperationalRoomStatusJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(operationalTeamJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(operationalTeamJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(operationalTeamStatusJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(distributorJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(DistributorListJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(DistributorJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(deviceCategoryJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(deviceCategoryListJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(DeviceCategoryJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(OperationalDeviceStatusJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(operationalDeviceJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(operationalDeviceJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scheduleJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void surgeryStartDateJFormattedTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surgeryStartDateJFormattedTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_surgeryStartDateJFormattedTextFieldActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void operationalRoomJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operationalRoomJComboBoxActionPerformed
        // TODO add your handling code here:
        if (operationalRoomJComboBox.getSelectedIndex() != -1) {
            OperationalRooms operationalRooms = (OperationalRooms) operationalRoomJComboBox.getSelectedItem();
            OperationalRoomStatusJLabel.setText(operationalRooms.getStatus());
        }
    }//GEN-LAST:event_operationalRoomJComboBoxActionPerformed

    private void surgeryEndDateJFormattedTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surgeryEndDateJFormattedTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_surgeryEndDateJFormattedTextFieldActionPerformed

    private void scheduleJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleJButtonActionPerformed
        // TODO add your handling code here:
        if (isValidFieldsValue()) {
            Surgery surgery = enterprise.getSurgeryDirectory().createSurgery();
            setSurgeryObjectValues(surgery);

            //create Reservation
            Reservation reservation = network.getReservationCatalog().createReservation(createReservation());

            //Notification to ware house
            sendNotificationToWareHouse(reservation);

            request.setStatus(ReservationStatusType.Reserved.getValue());
            JOptionPane.showMessageDialog(null, "Scheduled!!");
            
        }

    }//GEN-LAST:event_scheduleJButtonActionPerformed

    private boolean validateFields() {
        boolean isValid = true;

        //chk room selected is available
        if (!(operationalRoomJComboBox.getSelectedIndex() != -1
                && operationalRoomJLabel.getText().equals(RoomStatusType.Available.getValue()))) {
            isValid = false;
        }

        return isValid;
    }

    private void sendNotificationToWareHouse(Reservation reservation) {

        WarehouseManagementOrganization wmo = getWareHouseOrganization();
        if (wmo != null) {

            request.setStatus(WorkRequest.StatusType.PendingApproval.getValue());
            WorkRequest workRequest = wmo.getWorkQueue().createWorkRequest(WorkRequest.WorkRequestType.NewReservationWorkRequest.getValue());
            NewReservationWorkRequest reservationNotification = (NewReservationWorkRequest) workRequest;

            reservationNotification.setSender(userAccount);
            reservationNotification.setStatus(ReservationStatusType.Reserved.getValue());
            reservationNotification.setReservation(reservation);
        }
    }

    private Reservation createReservation() {
        Reservation reservation = new Reservation();
        reservation.setDevice((Device) operationalDeviceJComboBox.getSelectedItem());
        reservation.setEndTime(endDate);
        reservation.setStartTime(startDate);
        reservation.setReservationStatus(ReservationStatusType.Reserved.getValue());
        reservation.setLocation(enterprise.getOrganizationName());
        return reservation;
    }

    private void setSurgeryObjectValues(Surgery surgery) {
        surgery.setSurgeryTeam((SurgeryTeam) operationalTeamJComboBox.getSelectedItem());
        surgery.setOperatingRoom((OperationalRooms) operationalRoomJComboBox.getSelectedItem());
        surgery.setSurgeryStartDate(startDate);
        surgery.setSurgeryEndDate(endDate);
        Device device = (Device) operationalDeviceJComboBox.getSelectedItem();
        device.setMaxUsabilityCountRemaining(device.getMaxUsabilityCountRemaining() - 1);
        surgery.setDevices((Device) operationalDeviceJComboBox.getSelectedItem());
        surgery.setSurgeryType(surgeryTypeJTextField.getText());
    }

    private WarehouseManagementOrganization getWareHouseOrganization() {
        DistributorEnterprise de = (DistributorEnterprise) DistributorJComboBox.getSelectedItem();
        for (Organization organization : de.getOrganizationDirectory().getOrganizations()) {
            if (organization instanceof WarehouseManagementOrganization) {
                return (WarehouseManagementOrganization) organization;
            }
        }
        return null;
    }

    private void populateRoomComboBox() {
        operationalRoomJComboBox.removeAllItems();

        for (OperationalRooms operationalRooms : enterprise.getAvailableOperationalRooms(startDate, endDate)) {
            operationalRoomJComboBox.addItem(operationalRooms);
        }
    }

    private void populateTeamComboBox(String surgeryType) {
        operationalTeamJComboBox.removeAllItems();

        for (SurgeryTeam surgeryTeam : enterprise.getAvailableSurgeryTeam(surgeryType, startDate, endDate)) {
            operationalTeamJComboBox.addItem(surgeryTeam);
        }
    }

    private void populateDistributorComboBox() {
        DistributorJComboBox.removeAllItems();

        for (DistributorEnterprise distributorEnterprise : network.getNetworkDirectory().getDistributorEnterprise(network)) {
            DistributorJComboBox.addItem(distributorEnterprise);
        }

        if (DistributorJComboBox.getSelectedIndex() != -1) {
            populateCategoryComboBox((DistributorEnterprise) DistributorJComboBox.getSelectedItem());
        }
    }

    private void populateCategoryComboBox(DistributorEnterprise de) {
        DeviceCategoryJComboBox.removeAllItems();

        for (Category category : de.getCategoryCatalog().getCategories()) {
            DeviceCategoryJComboBox.addItem(category);
        }
        if (DeviceCategoryJComboBox.getSelectedIndex() != -1) {
            populateDeviceComboBox((Category) DeviceCategoryJComboBox.getSelectedItem(), de);
        }
    }

    private void populateDeviceComboBox(Category category, DistributorEnterprise de) {
        operationalDeviceJComboBox.removeAllItems();

        for (Device device : network.getReservationCatalog().getAvailableDevices(de, getWareHouseOrganization(), category, startDate, endDate)) {
            operationalDeviceJComboBox.addItem(device);
        }
    }

    private void clearAllComboBoxes() {
        operationalTeamJComboBox.removeAllItems();
        DeviceCategoryJComboBox.removeAllItems();
        operationalDeviceJComboBox.removeAllItems();
    }

    public boolean isValidFieldsValue() {
        boolean isValid = true;
        if (ValidatingFields.isComboBoxValid(DeviceCategoryJComboBox)) {
            deviceCategoryJLabel.setText("Select category.");
            isValid = false;
        } else {
            deviceCategoryJLabel.setText("");
        }

        if (ValidatingFields.isComboBoxValid(operationalRoomJComboBox)) {
            OperationalRoomStatusJLabel.setText("Select Room.");
            isValid = false;
        } else {
            OperationalRoomStatusJLabel.setText("");
        }

        if (ValidatingFields.isComboBoxValid(operationalTeamJComboBox)) {
            operationalTeamStatusJLabel.setText("Select Team.");
            isValid = false;
        } else {
            operationalTeamStatusJLabel.setText("");
        }

        if (ValidatingFields.isComboBoxValid(DistributorJComboBox)) {
            distributorJLabel.setText("Select distributor.");
            isValid = false;
        } else {
            distributorJLabel.setText("");
        }

        if (ValidatingFields.isComboBoxValid(operationalDeviceJComboBox)) {
            OperationalDeviceStatusJLabel.setText("Select distributor.");
            isValid = false;
        } else {
            OperationalDeviceStatusJLabel.setText("");
        }

        return isValid;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox DeviceCategoryJComboBox;
    private javax.swing.JComboBox DistributorJComboBox;
    private javax.swing.JLabel DistributorListJLabel;
    private javax.swing.JLabel OperationalDeviceStatusJLabel;
    private javax.swing.JLabel OperationalRoomStatusJLabel;
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel deviceCategoryJLabel;
    private javax.swing.JLabel deviceCategoryListJLabel;
    private javax.swing.JLabel distributorJLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JComboBox operationalDeviceJComboBox;
    private javax.swing.JLabel operationalDeviceJLabel;
    private javax.swing.JComboBox operationalRoomJComboBox;
    private javax.swing.JLabel operationalRoomJLabel;
    private javax.swing.JComboBox operationalTeamJComboBox;
    private javax.swing.JLabel operationalTeamJLabel;
    private javax.swing.JLabel operationalTeamStatusJLabel;
    private javax.swing.JButton scheduleJButton;
    private javax.swing.JLabel surgeryDateJLabel;
    private javax.swing.JLabel surgeryDateJLabel1;
    private javax.swing.JFormattedTextField surgeryEndDateJFormattedTextField;
    private javax.swing.JFormattedTextField surgeryStartDateJFormattedTextField;
    private javax.swing.JLabel surgeryTypeJLabel;
    private javax.swing.JTextField surgeryTypeJTextField;
    // End of variables declaration//GEN-END:variables
}
